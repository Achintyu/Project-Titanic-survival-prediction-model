# -*- coding: utf-8 -*-
"""Titanic Survival Prediction Using Machine Learning.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ymDjTW_Vq5Ak_YlkUD_GSe0f_W99oR-N

Importing the dependencies
"""

import numpy as np
import pandas as pd
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
import matplotlib.pyplot as plt

"""Data Collection and Processing"""

# load the data from csv file to Pnada DataFrame
titanic_data = pd.read_csv('/content/train.csv')

# printing the first 5 rows of the dataframe
titanic_data.head()

# number of rows and columns
titanic_data.shape

# getting some information about the data
titanic_data.info()

# check the number of missing values in each column
titanic_data.isnull().sum()

"""Handling the Missing values"""

# drop the "Cabin" column from the dataframe
titanic_data = titanic_data.drop(columns='Cabin', axis=1)

# replacing the mean values in "Age" column with mean values
titanic_data['Age'].fillna(titanic_data['Age'].mean(), inplace=True)

# finding the mode value of "Embarked" column
print(titanic_data['Embarked'].mode())

print(titanic_data['Embarked'].mode()[0])

# replacing the missing values in "Embarked" column with mode value
titanic_data['Embarked'].fillna(titanic_data['Embarked'].mode()[0], inplace=True)

# check the number of missing values in each column
titanic_data.isnull().sum()

"""Data Analysis"""

# getting some statistical measures about the data
titanic_data.describe()

# finding the number of people survived and not survived
titanic_data['Survived'].value_counts()

"""Data Visulaization"""

sns.set()

# making a count plot for "Survived" column
sns.countplot('Survived', data=titanic_data)

titanic_data['Sex'].value_counts()

# making a count plot for "Sex" column
sns.countplot('Sex', data=titanic_data)

# number of survivors based on Gender
sns.countplot('Sex', hue='Survived', data=titanic_data)

# making a count plot for "Pclass" column
sns.countplot('Pclass', data=titanic_data)

sns.countplot('Pclass', hue='Survived', data=titanic_data)

"""Encoding the Categorical columns

"""

titanic_data['Sex'].value_counts()

titanic_data['Embarked'].value_counts()

# converting categorical columns
titanic_data.replace({'Sex':{'male':0,'female':1}, 'Embarked':{'S':0,'C':1,'Q':2}}, inplace=True)

titanic_data.head()

"""separating features and target"""

X = titanic_data.drop(columns = ['PassengerId','Name','Ticket','Survived'],axis=1)
Y = titanic_data['Survived']

print(X)

print(Y)

"""Splitting the data into training data &Test data"""

X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size=0.2, random_state=2)

print(X.shape, X_train.shape, X_test.shape)

"""Model Traning

Logistic Regression
"""

model = LogisticRegression()

# training the Logistics regression model with training data
model.fit(X_train, Y_train)

"""Model Evalution

Accuracy score
"""

#accuracy on traing data
X_train_prediction = model.predict(X_train)

print(X_train_prediction)

training_data_accuracy = accuracy_score(Y_train, X_train_prediction)
print('Accuracy score of traing data:',training_data_accuracy)

#accuracy on test data
X_test_prediction = model.predict(X_test)

print(X_test_prediction)

test_data_accuracy = accuracy_score(Y_test, X_test_prediction)
print('Accuracy score of test data:',test_data_accuracy)

"""Checking for a Random Person:"""

input_data = (3,0,35,0,0,8.05,0) 
 # Note that these datas exclude the Survived data, as it is to be determined from the model itself

input_data_as_numpy_array = np.asarray(input_data)

input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

prediction = model.predict(input_data_reshaped)
#print(prediction)
if prediction[0]==0:
    print("Dead")
if prediction[0]==1:
    print("Alive")